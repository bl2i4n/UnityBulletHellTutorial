using UnityEngine;
using System.Collections;

                                // we are inheriting from our singleton class now
public class PlayerController : Singleton<PlayerController> 
{   
                                                        // from other classes classes call this public property and set the private value of facingLeft
                                                        // must make sure you are returning the private variable
    public bool FacingLeft { get { return facingLeft; } }
    [SerializeField] private float moveSpeed = 1f;
    [SerializeField] private float dashSpeed = 4f;
    [SerializeField] private TrailRenderer myTrailRenderer;
    [SerializeField] private Transform weaponCollider;

    // We are accessing the class PlayerControls from the PlayerControls.cs script
    // This class was generated by the Input System package that we creeated
    private PlayerControls playerControls;
    private Vector2 movement;
    private Rigidbody2D myRigidbody;
    private Animator myAnimator;
    private SpriteRenderer mySpriteRenderer;
    private float startingMoveSpeed;

    private bool facingLeft = false;
    private bool isDashing = false;

    // overrides the other awake we have in our singleton class
    protected override void Awake()
    {
        base.Awake(); // call the base class awake method

        playerControls = new PlayerControls();
        myRigidbody = GetComponent<Rigidbody2D>();
        myAnimator = GetComponent<Animator>();
        mySpriteRenderer = GetComponent<SpriteRenderer>();
    }

    private void Start()
    {
                                        // subscribe to our dash button
                                        // we also use a Lambda function
      playerControls.Combat.Dash.performed += _ => Dash();
      startingMoveSpeed = moveSpeed;  
    }

    private void OnEnable()
    {
        playerControls.Enable();
    }
    // Update is good for movement
    private void Update()
    {
        PlayerInput();
    }
    // FixedUpdate is good for physics
    private void FixedUpdate()
    {
        AdjustPlayerFacingDirection();
        Move();
    }

    public Transform GetWeaponCollider()
    {
        return weaponCollider;
    }

    private void PlayerInput()
    {
        movement = playerControls.Movement.Move.ReadValue<Vector2>();
        myAnimator.SetFloat("moveX", movement.x);
        myAnimator.SetFloat("moveY", movement.y);
    }

    private void Move()
    {           // pass in a parameter to determine what position we want to move into
        myRigidbody.MovePosition(myRigidbody.position + movement * (moveSpeed * Time.deltaTime));
    }

    private void AdjustPlayerFacingDirection()
    {
        Vector3 mousePos = Input.mousePosition;
        Vector3 playerScreenPoint = Camera.main.WorldToScreenPoint(transform.position);

        if (mousePos.x < playerScreenPoint.x)
        {
            mySpriteRenderer.flipX = true;
            facingLeft = true;
        }
        else
        {
            mySpriteRenderer.flipX = false;
            facingLeft = false;
        }
    }

    private void Dash()
    {
        if (!isDashing)
        {
            isDashing = true;
            moveSpeed *=  dashSpeed;
            myTrailRenderer.emitting = true;
            StartCoroutine(EndDashRoutine());
        }
    }

    private IEnumerator EndDashRoutine()
    {
        float dashTime = .2f;
        float dashCD = .25f;
        yield return new WaitForSeconds(dashTime);
        moveSpeed = startingMoveSpeed;
        myTrailRenderer.emitting = false;
        yield return new WaitForSeconds(dashCD);
        isDashing = false;

    }
}
